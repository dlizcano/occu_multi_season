---
title: "parte2"
description: | 
  Repaso del modelo de ocupación. Practica
author: 
  - name: Diego Lizcano
    orcid: 0000-0002-9648-0576
date: 2025/06/24
citation: 
  url: https://dlizcano.github.io/occu_multi_season/
  title: "Modelado de la Ocupación, abundancia y densidad de poblaciones: enfoque frecuentista y bayesiano en R. Modelo de ocupación de multiples temporadas"
google-scholar: true
bibliography: grateful-refs.bib
license: CC BY-SA
html_document:
    toc: true
    toc_float: true
    number_sections: true  
    theme: united
    highlight: github
    code-tools: true
    code-fold: true
---



# Usando datos reales

::: {.callout-tip title="Los datos que vamos a usar provienen del articulo:"}
Elevation as an occupancy determinant of the little red brocket deer (_Mazama rufina_) in the Central Andes of Colombia. [https://doi.org/10.15446/caldasia.v43n2.85449](https://doi.org/10.15446/caldasia.v43n2.85449)
:::


## Modelando la ocupacion de un venado andino

Acá evaluamos la influencia de variables del terreno sobre la ocupación del venado soche (_Mazama rufina_) en los Andes centrales de Colombia. La ocupación aumentó con la elevación hasta los 3000 m y por encima de este valor decrece. Esta información es crucial para predecir los posibles efectos del cambio climático sobre _M. rufina_ y otras especies de montaña.


Comenzamos cargando tres paquetes básicos necesarios para generar mapas; `mapview`, `sf` y  luego  `readr` para leer los datos y `unmarked` para los modelos de ocupación.

```{r}
#| echo: false
#| eval: true
library(grateful) # citation packages
```


```{r}
#| code-fold: true
#| warning: false
#| 
library(mapview)
library(sf)
library(readr) # read csv
library(DT) # tablas en html
library(unmarked)
library(terra)
library(elevatr)
```

El paquete sf se utiliza para trabajar con datos espaciales y ofrece funciones para leer, escribir y analizar datos espaciales (features en inglés) de una manera sencilla y eficiente. Mapview nos permite visualizar mapas rapidamente en R.

```{r}
#| code-fold: true
#| warning: false
#| 
library(maps)
```

### Cargar los datos

```{r}
#| code-fold: true
#| warning: false
#| 
# read photo data in object y_full. Columns are days and rows sites
# load("data/y_full.RData") # if you got the repo in hard disk
ydata <- "https://github.com/dlizcano/Mazama_rufina/blob/main/data/y_full.RData?raw=true"
load(url(ydata))

# read camera location
# cams_loc_QR <- read.csv("data/cams_location.csv") # if you got the repo in hard disk
camdata <- "https://raw.githubusercontent.com/dlizcano/Mazama_rufina/main/data/cams_location.csv"
cams_loc_QR <- read_csv(url(camdata))

```

### Veamos los datos

En las columnas de `y_full` tenemos los dias de muestreo y en las filas cada uno de los sitios donde se instaló una camara trampa.


```{r}
#| code-fold: true
#| warning: false
#| eval: false
#| echo: true
#| 
View(y_full)
```


En la tabla `cams_loc_QR` tenemos las coordenadas de cada camara. 

```{r}
#| code-fold: true
#| warning: false
#| eval: false
#| echo: true
#| 
View(cams_loc_QR)
```

### Obtención de covariables 

Ahora vamos a usar las coordenadas de cada camara para obtener la elevación, la pendiente y el aspecto, descargando un mapa de la elevacion con el paquete `elevatr` y la función `get_elev_raster`, la cual se conecta a la nube de Amazon Web Services (AWS) y para descargar el mapa. 

```{r}
#| code-fold: true
#| warning: false
#| eval: true
#| echo: true
#| 
# convert to sf
cams_loc_QR_sf <- st_as_sf(cams_loc_QR, coords = c("Longitud", "Latitud"), crs = "+proj=longlat +datum=WGS84 +no_defs")
# convert to UTM
cams_loc_QR_sf_utm <- st_transform(cams_loc_QR_sf, "EPSG:32618")

# not required
# centroid <- c(mean(cams_loc_QR$Longitud), mean(cams_loc_QR$Latitud))


clip_window <- ext(-75.60 , -75.39, 4.59, 4.81) # extent
# bb <- c(-75.60, 4.59, -75.39,  4.81)
clip_window_utm <- terra::project(clip_window,
                                  from=crs(cams_loc_QR_sf),
                                  to="EPSG:32618")


# get spatial data as spatrast
srtm <- rast(get_elev_raster(cams_loc_QR_sf_utm, z=8))

# crop the  raster using the vector extent
srtm_crop <- terra::crop(srtm, clip_window_utm)

# elevation.crop and terrain covs
elevation <- srtm_crop
slope<-terrain(srtm_crop, "slope", unit='degrees', neighbors=8)
aspect<-terrain(srtm_crop, "aspect", unit='degrees', neighbors=8)
roughness <- terrain(srtm_crop, "TPI", neighbors=8) #TPI (Topographic Position Index)

cov.list<-list(elevation, slope, aspect, roughness)
cov.stack<-rast(cov.list)
names(cov.stack) <- c("elevation", "slope", "aspect", "roughness" )
plot(cov.stack)
```

# Extraer covariables

```{r}
#| code-fold: true
#| warning: false
#| eval: true
#| echo: true
#| 
# extract covariates
cam_covs <- terra::extract (cov.stack, cams_loc_QR_sf_utm)
full_covs <- as.data.frame(cam_covs) # convert to Data frame
full_covs_1 <- scale(full_covs) #scale
full_covs_s <- as.data.frame(full_covs_1)
full_covs_s$camara <- cams_loc_QR$camara # add camera name

datatable(full_covs_s) #scaled
```

# Ocupación 

## objeto umf
```{r}
#############
# Occu analisys

# Make unmarked frame
umf_y_full<- unmarkedFrameOccu(y= y_full[,1:108])
siteCovs(umf_y_full) <- full_covs_s # data.frame(Elev=full_covs$Elev) # Full
#######Graficar umf
plot(umf_y_full)
```

## Posibles modelos
```{r}
# build  models
mf0<-occu(~1 ~ 1, umf_y_full)
mf1<-occu(~1 ~ elevation, umf_y_full)
mf2<-occu(~1 ~ elevation +I(elevation^2), umf_y_full)
mf3<-occu(~1 ~ slope, umf_y_full)
mf4<-occu(~1 ~ aspect, umf_y_full)
mf5<-occu(~1 ~ roughness, umf_y_full)#, starts = c(0.6, -3, 0))
mf6<-occu(~elevation +I(elevation^2) ~ elevation +I(elevation^2), umf_y_full)
mf7<-occu(~roughness ~ elevation +I(elevation^2), umf_y_full)
mf8<-occu(~slope ~ elevation +I(elevation^2), umf_y_full)


# fit list
fms1<-fitList("p(.) Ocu(.)"=mf0,
              "p(.) Ocu(elev)"=mf1,
              "p(.) Ocu(elev^2)"=mf2,
              "p(.) Ocu(slope)"=mf3,
              "p(.) Ocu(aspect)"=mf4,
              "p(.) Ocu(roughness)"=mf5,
              "p(elev^2) Ocu(elev^2)"=mf6,
              "p(roughness) Ocu(elev^2)"=mf7,
              "p(slope) Ocu(elev^2)"=mf8
)


modSel(fms1)
```

## Bondad de ajuste

```{r}
# print(fms1)

pb_f <- parboot(mf8, nsim=500, report=10) 
```

## plot Detección en escala original

Primero creamos un set de dados nuevos con el rango de todas las covariables y luego lo usamos para predecir.

```{r}
#
newdat_range<-data.frame(elevation=seq(min(full_covs_s$elevation),
                                       max(full_covs_s$elevation),length=100), 
                         slope=seq(min(full_covs_s$slope),
                                       max(full_covs_s$slope), length=100),
                         roughness=seq(min(full_covs_s$roughness),
                                       max(full_covs_s$roughness), length=100))


pred_det <-predict(mf8, type="det", newdata=newdat_range, appendData=TRUE)



## plot Detection en escala original
pred_det <-predict(mf8, type="det", newdata=newdat_range, appendData=TRUE)
plot(Predicted~roughness, pred_det,type="l",col="blue", 
     xlab="Roughness",
     ylab="Detection Probability",
     xaxt="n")
xticks <- c(-1, -0.5, 0, 0.5, 1, 1.5, 2, 2.5, 3) # -1:2
xlabs <- xticks*sd(full_covs$roughness) + mean(full_covs$roughness) #Use the mean and sd of original value to change label name
axis(1, at=xticks, labels=round(xlabs, 1))
lines(lower~roughness, pred_det,type="l",col=gray(0.5))
lines(upper~roughness, pred_det,type="l",col=gray(0.5))
```

##  Plot Ocupación en escala original
```{r}
pred_psi <-predict(mf8, type="state", newdata=newdat_range, appendData=TRUE) 


###  Plot occupancy en escala original
plot(Predicted ~ elevation, pred_psi, type="l", ylim=c(0,1), col="blue",
     xlab="Elevation",
     ylab="Occupancy Probability",
     xaxt="n")
xticks <- c(-1, -0.5, 0, 0.5, 1, 1.5, 2)  # -1:2
xlabs <- xticks*sd(full_covs$elevation) + mean(full_covs$elevation) #Use the mean and sd of original value to change label name
axis(1, at=xticks, labels=round(xlabs, 1))
lines(lower ~ elevation, pred_psi, type="l", col=gray(0.5))
lines(upper ~ elevation, pred_psi, type="l", col=gray(0.5))
```

## Modelo espacialmente explícito 

### Predicción espacial

aca usamos el raster para prededir con el mejor modelo.

```{r}
library(RColorBrewer)

srtm_crop_s <- rast(list(scale(elevation), 
                         scale(slope),
                         scale(roughness)
                         )) # scale altitud
names(srtm_crop_s) <- c("elevation", "slope", "roughness") # put names
# crs(srtm_crop_s) <- "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"

pred_p_s <-predict(mf8, type="det", newdata=srtm_crop_s) 
pred_psi_s <-predict(mf8, type="state", newdata=srtm_crop_s) 


```

### Plot

#### Convertir a escala original

En éste caso, este paso no require la conversión. 

```{r}
pred_p_r <- pred_p_s # * sd(full_covs$roughness) + mean(full_covs$roughness)


pred_psi_r <- pred_psi_s # * sd(full_covs$roughness) + mean(full_covs$roughness)


# w <- project(pred_p_r, "EPSG:32618")
# clr <- colorRampPalette(brewer.pal(9, "YlGn"))



```


#### Detection
```{r}
mapview (pred_p_r[[1]]) + cams_loc_QR_sf


```

#### Occupancy
```{r}
mapview (pred_psi_r[[1]]) + cams_loc_QR_sf
```



# Conclusión

Esperamos que haya disfrutado de este curso.

Recuerde que la práctica es fundamental para desarrollar sus habilidades de R, por lo que le recomendamos que intente hacer de R una parte integral de sus flujos de trabajo. Afortunadamente, con la abundancia de recursos disponibles gratuitamente y la inmensa comunidad de usuarios, ¡aprender R nunca ha sido tan fácil!

## Obtenga ayuda

Escribir código consiste en ensayo error y un 90% buscar la respuesta en Google.

Si busca un problema en la web, como "ggplot remove legend", normalmente obtendrá una respuesta bastante decente en Stack Overflow o en un sitio similar.

Si la respuesta aún no existe en línea, regístrese en Stack Overflow y pregúntela usted mismo (pero primer dedique tiempo suficiente en buscar ... ¡nadie quiere ser etiquetado por duplicar una pregunta existente!).

Otra buena idea es buscar un grupo de apoyo local. El uso de R es una experiencia emocional, la curva de aprendizaje al comienzo es bien empinada, la frustración es común, pero luego de un tiempo la alegría de encontrar una solución puede ayudarnos a persistir. Tener a otras personas para ayudar, o simplemente escuchar sus frustraciones es una gran motivación para seguir aprendiendo R.

![](https://media.giphy.com/media/6heBQSjt2IoA8/giphy.gif)

## Package Citation

```{r}
#| code-fold: true
pkgs <- cite_packages(output = "paragraph", pkgs="Session", out.dir = ".")
# knitr::kable(pkgs)
pkgs
```

## Sesion info

::: {.callout-note collapse="true"}
```{r}
print(sessionInfo(), locale = FALSE)
```
:::
